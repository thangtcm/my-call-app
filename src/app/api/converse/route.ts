import { NextRequest, NextResponse } from "next/server";

const DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1353863038213816430/LR0owTe6yD7gx0j6fiVVUf9vOWhuvN3InNAyC93RGZyt78uVdbgOEsSuWgu10l91GOb0";
const callState = new Map<string, number>(); // ƒê·∫øm s·ªë l∆∞·ª£t h·ªôi tho·∫°i

async function sendToDiscord(message: string, data: any = {}) {
    try {
        await fetch(DISCORD_WEBHOOK_URL, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                content: `${message}\n\`\`\`json\n${JSON.stringify(data, null, 2)}\n\`\`\``,
            }),
        });
    } catch (error) {
        console.error("Failed to send Discord log:", error);
    }
}

export async function POST(request: NextRequest): Promise<NextResponse> {
    const body = await request.json();
    const callId = body.call_id;
    const userSpeech = body.speech?.results?.[0]?.text || "";

    if (!callId) {
        await sendToDiscord("‚ö†Ô∏è L·ªói: Kh√¥ng c√≥ `callId`", body);
        return NextResponse.json([{ action: "talk", text: "C√≥ l·ªói x·∫£y ra." }]);
    }

    if (!userSpeech) {
        await sendToDiscord("‚ö†Ô∏è Kh√¥ng nh·∫≠n ƒë∆∞·ª£c gi·ªçng n√≥i", { callId, rawData: body });

        return NextResponse.json([
            {
                action: "talk",
                text: "Xin l·ªói, t√¥i kh√¥ng nghe r√µ. B·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng?",
                voice: "hn_female_thutrang_phrase_48k-hsmm",
            },
            {
                action: "input",
                eventUrl: "https://my-call-app.vercel.app/api/converse",
                type: ["speech"],
                speech: {
                    endOnSilence: 1.5,
                    language: "vi-VN",
                },
            },
        ]);
    }
    await sendToDiscord("üó£Ô∏è Kh√°ch h√†ng n√≥i:", { callId, text: userSpeech });

    // Gi·ªõi h·∫°n s·ªë l·∫ßn h·ªôi tho·∫°i ƒë·ªÉ tr√°nh v√≤ng l·∫∑p
    const count = callState.get(callId) || 0;
    if (count >= 3) {
        callState.delete(callId);
        await sendToDiscord("üîö K·∫øt th√∫c h·ªôi tho·∫°i sau 3 l∆∞·ª£t", { callId });
        return NextResponse.json([{ action: "talk", text: "Xin c·∫£m ∆°n, ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!" }]);
    }

    callState.set(callId, count + 1);

    return NextResponse.json([{ action: "listen", text: "Vui l√≤ng ti·∫øp t·ª•c." }]);
}
