import { NextRequest, NextResponse } from "next/server";
import { AssemblyAI } from "assemblyai";

const DISCORD_WEBHOOK_URL = "https://discord.com/api/webhooks/1353863038213816430/LR0owTe6yD7gx0j6fiVVUf9vOWhuvN3InNAyC93RGZyt78uVdbgOEsSuWgu10l91GOb0";
const assemblyAIClient = new AssemblyAI({
  apiKey: process.env.ASSEMBLYAI_API_KEY as string,
});

async function sendToDiscord(message: string, data: any = {}) {
  try {
    await fetch(DISCORD_WEBHOOK_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        content: `${message}\n\`\`\`json\n${JSON.stringify(data, null, 2)}\n\`\`\``,
      }),
    });
  } catch (error) {
    console.error("Failed to send Discord log:", error);
  }
}

export async function POST(request: NextRequest) {
  const body = await request.json();
  const audioUrl = body.recording_url;

  if (!audioUrl) {
    return NextResponse.json({ error: "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c file ghi √¢m" }, { status: 400 });
  }

  await sendToDiscord("üîä File ghi √¢m nh·∫≠n ƒë∆∞·ª£c", { audioUrl });

  try {
    // Chuy·ªÉn ƒë·ªïi √¢m thanh th√†nh vƒÉn b·∫£n
    const transcript = await assemblyAIClient.transcripts.transcribe({ audio: audioUrl });
    if (transcript.status !== "completed") {
      throw new Error("L·ªói tr√≠ch xu·∫•t vƒÉn b·∫£n");
    }
    const text = transcript.text || "Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c n·ªôi dung";
    await sendToDiscord("üìÑ VƒÉn b·∫£n tr√≠ch xu·∫•t", { text });

    // T·∫°m th·ªùi echo l·∫°i n·ªôi dung ng∆∞·ªùi d√πng n√≥i b·∫±ng action "talk"
    const aiResponse = `B·∫°n v·ª´a n√≥i: ${text}`;

    // Tr·∫£ v·ªÅ NCCO response v·ªõi action "talk"
    const responseActions = [
      {
        action: "talk",
        text: aiResponse,
        voice: "hn_female_thutrang_phrase_48k-hsmm",
      },
      {
        action: "talk",
        text: "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá. Xin ch√†o v√† h·∫πn g·∫∑p l·∫°i!",
        voice: "hn_female_thutrang_phrase_48k-hsmm",
      },
    ];

    return NextResponse.json(responseActions);
  } catch (error) {
    console.error("L·ªói x·ª≠ l√Ω AI:", error);
    await sendToDiscord("‚ùå L·ªói x·ª≠ l√Ω", { error: String(error) });
    return NextResponse.json({ error: "L·ªói x·ª≠ l√Ω √¢m thanh" }, { status: 500 });
  }
}